#Аврамекно Екатерина Алексеевна ИСУ: 408103
class Car():
    def __init__(self, tank_capacity : float, fuel_consumption : float, mean_speed: float):
        self.tank_capacity = tank_capacity
        self.fuel_consumption = fuel_consumption
        self.mean_speed = mean_speed
        
    
    def set_tc(self, tc : float):
        self.tank_capacity = tc
    
    def get_tc(self):
        return self.tank_capacity
        
    def set_fc(self, fc : float):
        self.fuel_consumption = fc
        
    def get_fc(self):
        return self.fuel_consumption
        
    def set_ms(self, ms : float):
        self.mean_speed = ms
        
    def get_ms(self):
        return self.mean_speed
        
    def distance(self):
        return round((self.tank_capacity / self.fuel_consumption) * self.mean_speed, 2)
    
    def fuel_consumption250(self):
        return round((250 / self.mean_speed) * self.fuel_consumption, 2)
        
        
class Truck(Car):
    wheels_count = 6
    
    def __init__(self ,tank_capacity : float, fuel_consumption : float, mean_speed : float, weight : float):
        super().__init__(tank_capacity, fuel_consumption, mean_speed)
        self.weight = weight

    def set_weight(self, weight: float):
        self.weight = weight

    def get_weight(self):
        return self.weight
    
    def weight_to_fuel250(self):
        return round(self.weight / self.fuel_consumption250(), 2)
    
    # Возращает грузовик с наилучшим показателем метрики
    # cоотношения веса груза к количеству топлива на 250 км
    def __add__(self, other):
        if self.weight_to_fuel250() > other.weight_to_fuel250():
            return Truck(self.tank_capacity, self.fuel_consumption, self.mean_speed, self.weight)
        
        else:
            return Truck(other.tank_capacity, other.fuel_consumption, other.mean_speed, other.weight)


class Passenger(Car):
    wheels_count = 4

    def __init__(self ,tank_capacity : float, fuel_consumption : float, mean_speed : float, passenger_count : float):
        super().__init__(tank_capacity, fuel_consumption, mean_speed)
        self.passenger_count = passenger_count

    def set_passenger_count(self, pc):
        self.passenger_count = pc
    
    def get_passenger_count(self):
        return self.passenger_count
    
    def pc_to_fuel250(self):
        return round(self.passenger_count / self.fuel_consumption250(), 2)
    
    # Возращает автомобиль с наилучшим показателем метрики
    # cоотношения количества пассажиров к количеству топлива на 250 км
    def __add__(self, other):
        if self.pc_to_fuel250() > other.pc_to_fuel250():
            return Passenger(self.tank_capacity, self.fuel_consumption, self.mean_speed, self.passenger_count)
        
        else:
            return Passenger(other.tank_capacity, other.fuel_consumption, other.mean_speed, other.passenger_count)
        

def output():
    print("Грузовик")
    truck1 = Truck(60, 10, 60.5, 800.3)
    truck2 = Truck(60, 10, 60.5, 900.3)
    print(truck1.weight_to_fuel250())
    print(truck2.weight_to_fuel250())
    print((truck2 + truck1).weight_to_fuel250())

    print("-----------------------------------------------")

    print("Легковой автомобиль")
    passenger1 = Passenger(60, 10, 60.5, 2)
    passenger2 = Passenger(60, 10, 60.5, 4)
    print(passenger1.pc_to_fuel250())
    print(passenger2.pc_to_fuel250())
    print((passenger1 + passenger2).pc_to_fuel250())

if __name__ == "__main__":
    output()
